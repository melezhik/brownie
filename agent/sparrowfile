#!raku

use Sparky::JobApi;

class Pipeline

does Sparky::JobApi::Role

{

  method stage-main {

    my $random-string = ("a".."z","A".."Z",0..9).flat.roll(18);

    my $agent-id = "/tmp/agent".IO ~~ :f ?? "/tmp/agent".IO.slurp !! $random-string;

    unless  "/tmp/agent".IO ~~ :f {
      "/tmp/agent".IO.spurt($random-string);
    }

    my $agent = ( %*ENV<BRW_AGENT_NAME_PREFIX> || "agent" ) ~ "-" ~ $agent-id;

    say "agent: $agent";

    bash "raku -V > rakuenv.txt";

    my $my = Sparky::JobApi.new( :mine );

    $my.put-file("rakuenv.txt","rakuenv.txt");

    file-delete "tasks.tar";

    say "archiving tasks/ to tasks.tar";

    bash "tar cf {$*CWD}/tasks.tar -C tasks/ .";    

    my $orch-job = Sparky::JobApi.new(
      :api(config()<orchestrator-url>),
      :project<browny.queue>,
      :job-id($agent),
    );

    my $orch-job2 = Sparky::JobApi.new(
      :api(config()<orchestrator-url>),
      :project<agent.ping>,
    );

    while True {

      $orch-job2.queue({
        description => "hello from $agent", 
        tags => %(
          agent => $agent,
          stage => "ping",
        ),
      });
      
      my $q = $orch-job.get-stash();

      say "load requests from orchestrator queue";
      
      if $q {
        my $version = $q<version>;
        if "{config()<base-dir>}/jobs/{$q<run-id>}".IO ~~ :d {
            say "skip job: {$q<run-id>}, already taken";
        } else {
          say "///";
          say "run tests for job: {$q<run-id>}";
          say "///";
          my $j = Sparky::JobApi.new(
            :project<agent.job>,
          );
          $j.put-stash(%(list => $q<modules><>));
          $j.put-file("tasks.tar","tasks.tar");
          $j.queue({
            description => "test job: {$q<run-id>}", 
            tags => %(
              rakudo-version => $version,
              stage => "test",
            ),
          });
          directory "{config()<base-dir>}/jobs/{$q<run-id>}";
        }
      }
      say "<<< sleep for 60 seconds";
      sleep(60);
    }
  }

  method stage-test {

    my $my = Sparky::JobApi.new( :mine );

    my $blob = $my.get-file("tasks.tar");

    directory "tasks";

    my $fh = open "tasks/tasks.tar", :w, :bin;
    $fh.write($blob);
    $fh.close;

    bash "tar -xf tasks.tar  && ls -l", %(
      cwd => "{$*CWD}/tasks",
      description => "unpack tasks.tar",
    );

    my @list = $my.get-stash()<list><>;
    my %results;

    my $orch-job = Sparky::JobApi.new(
      :api(config()<orchestrator-url>),
      :project<agent.report>,
    );

    "list.txt".IO.spurt(@list.join("\n"));

    $my.put-file("list.txt","list.txt");

    my $status = True;

    for @list -> $m {
      %results{$m} = %( status => "", log => "" );
      my $s = task-run "tasks/run-test", %(
        module => $m
      );
      if $s<success> == 1 {
        %results{$m}<status> = True
      } else {
        %results{$m}<status> = False;
        $status = False;
        %results{$m}<log> = "log.txt".IO.slurp;
        $my.put-file("log.txt","{$m}.log.txt");
      }
    }

    $orch-job.put-stash(%results);

    $orch-job.queue({
      description => "results", 
      tags => %(
        version => tags()<rakudo-version>,
        stage => "results",
      ),
    });

    die "some tests failed" unless $status;

  }

  method stage-ping {

    directory "{config()<base-dir>}/agents";

    "{config()<base-dir>}/agents/{tags()<agent>}".IO.spurt("");

  }

  method stage-results {

    my $me = Sparky::JobApi.new( :mine );

    my $resutls = $me.get-stash();
    my $version = tags()<version>;
    for $resutls.kv -> $k, $v {
      directory "{config()<base-dir>}/versions/$version/$k";
      if $v<status> {
        "{config()<base-dir>}/versions/$version/{$k}.OK".IO.spurt("");
      } else {
        "{config()<base-dir>}/versions/$version/{$k}.FAIL".IO.spurt("");
      }
      if $v<log> {
        "{config()<base-dir>}/versions/$version/{$k}.log".IO.spurt($v<log>);
        $me.put-file("{config()<base-dir>}/versions/$version/{$k}.log","{$k}.log");
      }

    }

  }
}


Pipeline.new.run;