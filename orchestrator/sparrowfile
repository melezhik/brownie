#!raku

use Sparky::JobApi;

class Pipeline

does Sparky::JobApi::Role

{

  method base-dir {
    "{%*ENV<HOME>}/.brownie"
  }

  method stage-main {

    "list.txt".IO.spurt(config()<list><>.join("\n"));

    my $me = Sparky::JobApi.new(:mine);

    $me.put-file("list.txt","list.txt");

    my @eff-list = config()<list><>;
    
    my $j = 0;

    while (True) {
      my @_list = [];
      for @eff-list -> $l {
        if "{self.base-dir}/versions/2025.10/{$l}.OK".IO ~~ :f  ||
           "{self.base-dir}/versions/2025.10/{$l}.FAIL".IO ~~ :f  {
              next;
        }
        push @_list, $l;
      }

      @eff-list = @_list;

      @eff-list.=pick(@eff-list);

      last if @eff-list.elems == 0;

      my $chunk = 0;
      my @agents;
      my $k = 1;

      while (True) {
        say "look for available agents ...";    
        if "{self.base-dir}/agents".IO ~~ :d { 
          for dir("{self.base-dir}/agents") {
              push @agents, $_.basename;
          }
        }
        say " \\ try number ... $k";
        say "<<< sleep for 5 seconds";
        sleep(5);
        $k++;
        last if $k > 4;
        last if @agents.elems > 0;
      }

      # remove agents that don't respond more then 10 minutes
      
      if "{self.base-dir}/agents".IO ~~ :d {
        bash "find {self.base-dir}/agents -type f -mmin +10 -delete", %(
          description => "remove offline agents from queue"
        );
      }

      say "{@agents.elems} online agents found";

      if @agents.elems > 0 && @eff-list.elems > 0 {
        if @eff-list.elems < @agents.elems {
            $chunk = 1;
            @agents = @agents[0 .. @eff-list.elems -1];
        } else {
          $chunk = Int(@eff-list.elems/@agents.elems);
          $chunk = 3 if $chunk > 3;
        }
      }

      if @agents > 0 && @eff-list.elems > 0 {

        my $a = 0;

        say "agents cnt: {@agents.elems}";

        say "chunk: $chunk";

        for 1 .. @agents.elems -> $i {

          my @slice = @eff-list[$a .. $a + $chunk - 1];

          @slice = @slice.sort;

          say "push job to agent {@agents[$i-1]}";

          my $agents-queue = Sparky::JobApi.new(
            :project<browny.queue>,
            :job-id(@agents[$i-1]),
          );

          $agents-queue.put-stash(
            %( 
              version => "2025.10",
              agent => @agents[$i-1],
              modules => @slice,
              run-id => time, 
            )
          );
          say "slice: {@slice.raku}";
          $a = $a + $chunk;
          say "...";
        }
      }

      say "///";
      say "[{@eff-list.elems}] tests out of [{config()<list>.elems}] left";
      say "///";

      say "<<< sleep for 10 seconds";
      sleep(10);
      $j++;
      
      # stop after 2 minutes
      last if $j > 120;

    }

    say "done";

    say "summary";
    my $summary = "";

    for config()<list><> -> $m {

      my $status = "?";

      $status = "OK" if "{self.base-dir}/versions/2025.10/{$m}.OK".IO ~~ :f;
      $status = "FAIL" if "{self.base-dir}/versions/2025.10/{$m}.FAIL".IO ~~ :f;

      say "$m ... \t $status";

      $summary ~= "$m ... \t $status\n";

    }

    "summary.txt".IO.spurt($summary);
    

    for config()<list><> -> $m {
      if "{self.base-dir}/versions/2025.10/{$m}.log".IO ~~ :f {
        $me.put-file("{self.base-dir}/versions/2025.10/{$m}.log","$m.log");
      }
    }

    $me.put-file("summary.txt","summary.txt");

  }
}  

Pipeline.new.run;
