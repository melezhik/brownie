#!raku

use Sparky::JobApi;

use Ecosystem;

class Pipeline

does Sparky::JobApi::Role

{

  method base-dir {
    "{%*ENV<HOME>}/.brownie"
  }

  method stage-main {

    my @d;

    my $eco = Ecosystem.new;

    say "Testing top 100 modules on the Raku Ecosystem River:";

    my $start_time = time;

    for $eco.river.sort(-*.value.elems).map(*.key).head(100) -> $d {
        push @d, $d;
        #say $d;
    }

    "list.txt".IO.spurt(@d.join("\n"));

    my $me = Sparky::JobApi.new(:mine);

    $me.put-file("list.txt","list.txt");
    
    my $j = 0;

    my %sent;

    while (True) {

      my @_list = [];
      
      my $alr-comp = 0;

      # recalc stat and prepare new chunk of tests
      # to process
      my $sent-back = 0;
      for @d -> $l {
        if "{self.base-dir}/versions/2025.10/{$l}.OK".IO ~~ :f  ||
           "{self.base-dir}/versions/2025.10/{$l}.FAIL".IO ~~ :f  {
              # module is already completed
              $alr-comp++;
              %sent{$l}:delete;
              next;
        }
        if %sent{$l} {
          my $delta = Int(now - %sent{$l});
          if $delta > 600*3 {
              #say "we have not heard anyting from $l last 30 minutes, return it back to orch queue";
              %sent{$l}:delete;
              $sent-back++;
          } else {
            # module is already send to some agent
            # and have processing time less then
            # 30 minutes
            # skip it
            next
          }
        } 
        push @_list, $l;
      }

      my $els = Int(time - $start_time);
      my $elh;

      if $els < 60 {
         $elh = "<1m";
      } elsif $els < 60*60 {
         $elh = Int($els/60) ~ "m";
      } elsif $els < 60*60*24 {
         $elh = Int($els/60) ~ "h";
      }
   
      say "||| TESTS STAT: time: $elh | finished tests: {$alr-comp} | tests in progress: {%sent.keys.elems} | tests total: {@d.elems} | current queue: {@_list.elems} | send back: $sent-back";

      #@_list.=pick(@_list);

      if $alr-comp == @d.elems {
        last;
      }

      my $chunk = 0;

      my @agents;
      
      say "look for available agents ...";

      @agents = [];

      if "{self.base-dir}/agents".IO ~~ :d { 
        
        for dir("{self.base-dir}/agents") -> $ag {

          my $age = Int(now - $ag.created.DateTime);

          if $age <= 360 { # only use agents with 6 minutes ago at least heartbeat
            say "agent {$ag.basename} heartbeat OK - [$age] seconds";
            push @agents, $ag.basename;
          } else {
            say "remove agent {$ag.basename} from rotation, BAD heartbit -  $age seconds";
            $ag.unlink; 
          }
        };
      }

      say "";

      say "{@agents.elems} online agents found";
        
      if @agents.elems > 0 && @_list.elems > 0 {

        if @_list.elems < @agents.elems {
            $chunk = 1;
            @agents = @agents[0 .. @_list.elems -1];
        } else {
          $chunk = Int(@_list.elems/@agents.elems);
          $chunk = 10 if $chunk > 10;
        }
      
        my $a = 0;

        say "agents used: {@agents.elems}";

        say "chunk: $chunk";

        for 1 .. @agents.elems -> $i {

          my @slice = @_list[$a .. $a + $chunk - 1];

          @slice = @slice.sort;

          say "push job to agent {@agents[$i-1]}";

          my $agents-queue = Sparky::JobApi.new(
            :project<browny.queue>,
            :job-id(@agents[$i-1]),
          );

          $agents-queue.put-stash(
            %( 
              version => "2025.10",
              agent => @agents[$i-1],
              modules => @slice,
              run-id => time, 
            )
          );

          say "slice: {@slice.raku}";
          $a = $a + $chunk;
          say "...";
          
          for @slice -> $s {
            %sent{$s} = now;
          }
        }
      }

      #say "<<< sleep for 30 seconds";

      sleep(120);

      $j++;
      
      last if $j > 10000;
      
    }

    say "done";

    say "summary";
    my $summary = "";

    for @d -> $m {

      my $status = "?";

      $status = "OK" if "{self.base-dir}/versions/2025.10/{$m}.OK".IO ~~ :f;
      $status = "FAIL" if "{self.base-dir}/versions/2025.10/{$m}.FAIL".IO ~~ :f;

      say "$m ... \t $status";

      $summary ~= "$m ... \t $status\n";
     
    }

    "summary.txt".IO.spurt($summary);
    

    for @d -> $m {
      if "{self.base-dir}/versions/2025.10/{$m}.log".IO ~~ :f {
        $me.put-file("{self.base-dir}/versions/2025.10/{$m}.log","$m.log");
      }
    }

    $me.put-file("summary.txt","summary.txt");

  }
}  

Pipeline.new.run;
